The procedure pop uses a dangling pointer when it frees e and then returns e->name.  This value that it returns is thus also a danlgling pointer and so the values of w, x, y, z are all dangling pointers.  When push("C") and push("D") are called, they use malloc to allocate new elements and since w is a dangling pointer, there is a chance that it will point to one of these new elements.  In addition, printf will call malloc and so there is a chance that this will affect the values of x, y, and z.  What actually happens is not necessarily predictable.  In particular, it will vary by platform because, for example, Linux, Mac OS, and Cygwin all use differnet implementions of malloc.
